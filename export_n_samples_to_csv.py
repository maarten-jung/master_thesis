#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: Maarten L. Jung

Extracts the number of samples needed to reach the ESS thresholds from the 
sampling data generated by the Bayesian independence sampler (when run with the 
prior distributions and likelihood functions generated by the Bayesian 
habit-learning agent)
"""

import numpy as np
import pandas as pd
import json
import jsonpickle
import jsonpickle.ext.numpy as jsonpickle_numpy
from pathlib import Path

jsonpickle_numpy.register_handlers()


folder = Path.cwd() / "data"

ess_crits = [500, 1000]
all_n_samples = np.zeros((len(ess_crits), 3, 100, 50), dtype = np.int32)

for i, ess_crit in enumerate(ess_crits):
    fname_in_rel = f"sampling_ess_crit_{ess_crit}_alpha_1_10_100_mb_50_rep_100.json"
    fname_in = folder / fname_in_rel
    with open(fname_in, 'r') as file_in:
        data = json.load(file_in)        
    dict_sampling = jsonpickle.decode(data)
    all_n_samples[i] = np.array(dict_sampling["n_posterior_samples"], dtype = np.int32)
    
index = pd.MultiIndex.from_product([range(s) for s in all_n_samples.shape], 
                                   names = ["ess_criterion", 
                                            "habitual_tendency", 
                                            "repetition", 
                                            "episode"])
df = pd.DataFrame(all_n_samples.flatten(), index = index).reset_index()
df = df.rename(columns = {0 : "n_samples"})

df["ess_criterion"] = df["ess_criterion"].replace(range(len(ess_crits)), ess_crits)
df["habitual_tendency"] = df["habitual_tendency"].replace(range(len(dict_sampling["habitual_tendency"])), 
                                                          dict_sampling["habitual_tendency"])
df["repetition"] = df["repetition"] + 1
df["episode"] = df["episode"] + 1

fname_out_rel = "n_samples_all_ess_crits_all_habit_tendcs.csv"
fname_out = folder / fname_out_rel
df.to_csv(fname_out, index = False)